// import React, { useState ,useRef,useEffect} from 'react';
// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
// import { 
//   faFolder, 
//   faComment, 
//   faBookOpen, 
//   faReply,
//   faEdit,
//   faTrash,
//   faCheck,
//   faTimes,
//   faPlus,
//   faVideo,
//   faFolderTree,
//   faCog
// } from '@fortawesome/free-solid-svg-icons';

// const ContentManagement = () => {
//   const [activeTab, setActiveTab] = useState('categories');
//   const [selectedImage, setSelectedImage] = useState(null);

//   const [categories, setCategories] = useState([
//     { 
//       id: 1, 
//       name: 'Skincare', 
//       subcategories: [
//         { id: 101, name: 'Face Care' },
//         { id: 102, name: 'Body Care'}
//       ]
//     },
//     { 
//       id: 2, 
//       name: 'Haircare', 
//       subcategories: [
//         { id: 201, name: 'Shampoos',},
//         { id: 202, name: 'Conditioners' }
//       ]
//     },
//     { 
//       id: 3, 
//       name: 'Bodycare',
//       subcategories: []
//     }
//   ]);
  
//   const [testimonials, setTestimonials] = useState([
//     { id: 1, name: 'Priya Sharma', content: 'These products transformed my skin!', rating: 5, status: 'approved' },
//     { id: 2, name: 'Rahul Verma', content: 'Good quality but delivery was late', rating: 4, status: 'pending' }
//   ]);
  
//   const [blogs, setBlogs] = useState([
//     { 
//       id: 1, 
//       title: 'Benefits of Natural Skincare', 
//       category: 'Skincare', 
//       subcategory: 'Face Care',
//       date: '2024-01-15', 
//       status: 'published', 
//       comments: 8,
//       content: 'This is the full content of the blog post about natural skincare benefits...',
//       videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ'
//     },
//     { 
//       id: 2, 
//       title: 'How to Take Care of Oily Hair', 
//       category: 'Haircare', 
//       subcategory: 'Shampoos',
//       date: '2024-01-10', 
//       status: 'draft', 
//       comments: 0,
//       content: 'This is the full content about haircare for oily hair...',
//       videoUrl: ''
//     }
//   ]);
  
//   const [comments, setComments] = useState([
//     { id: 1, post: 'Benefits of Natural Skincare', author: 'Neha Patel', content: 'Great article! When will you write about dry skin?', date: '2024-01-16', status: 'approved' },
//     { id: 2, post: 'Benefits of Natural Skincare', author: 'Amit Kumar', content: 'I tried these tips and they worked wonders!', date: '2024-01-17', status: 'pending' }
//   ]);
  
//   // Form states
//   const [newCategory, setNewCategory] = useState({ name: '', parentId: '' });
//   const [newTestimonial, setNewTestimonial] = useState({ name: '', content: '', rating: 5 });
//   const [newBlog, setNewBlog] = useState({ 
//     title: '', 
//     content: '', 
//     category: '', 
//     subcategory: '',
//     videoUrl: '' 
//   });
//   const [replyingTo, setReplyingTo] = useState(null);
//   const [replyContent, setReplyContent] = useState('');
//   const [editingCategory, setEditingCategory] = useState(null);
//   const [editingBlog, setEditingBlog] = useState(null);

//    const [deliverySettings, setDeliverySettings] = useState({
//     mode: "fixed",
//     fixedCharge: 0,
//     apiUrl: "",
//     freeDeliveryAbove: 0,
//   });

// const [banners, setBanners] = useState([
//   { heading: "", subtext: "", buttonText: "", redirectUrl: "", imageFile: null, imagePreview: "" },
// ]);
 


// const previewUrlsRef = useRef([]);

// // create preview and store File + preview URL
// const handleBannerImageChange = (index, file) => {
//   if (!file) return;
//   const updated = [...banners];

//   // revoke old preview for this banner (if any)
//   const old = updated[index]?.imagePreview;
//   if (old) {
//     URL.revokeObjectURL(old);
//     previewUrlsRef.current = previewUrlsRef.current.filter(u => u !== old);
//   }

//   const preview = URL.createObjectURL(file);
//   previewUrlsRef.current.push(preview);

//   updated[index] = {
//     ...updated[index],
//     imageFile: file,
//     imagePreview: preview,
//   };
//   setBanners(updated);
// };

// const removeBannerImage = (index) => {
//   const updated = [...banners];
//   const old = updated[index]?.imagePreview;
//   if (old) {
//     URL.revokeObjectURL(old);
//     previewUrlsRef.current = previewUrlsRef.current.filter(u => u !== old);
//   }
//   updated[index] = {
//     ...updated[index],
//     imageFile: null,
//     imagePreview: "",
//   };
//   setBanners(updated);
// };

// // cleanup on unmount
// useEffect(() => {
//   return () => {
//     previewUrlsRef.current.forEach(u => URL.revokeObjectURL(u));
//     previewUrlsRef.current = [];
//   };
// }, []);

//   // Category functions
//   const addCategory = () => {
//     if (newCategory.name.trim() === '') return;
    
  
//     const parentId = newCategory.parentId ? parseInt(newCategory.parentId) : null;
    
//     if (parentId) {
//       // Add as subcategory
//       setCategories(categories.map(cat => {
//         if (cat.id === parentId) {
//           const newSubcategory = {
//             id: Date.now(),
//             name: newCategory.name,
//                         count: 0
//           };
//           return {
//             ...cat,
//             subcategories: [...cat.subcategories, newSubcategory]
//           };
//         }
//         return cat;
//       }));
//     } else {
//       // Add as main category
//       const newCat = {
//         id: Date.now(),
//         name: newCategory.name,
       
//         subcategories: []
//       };
//       setCategories([...categories, newCat]);
//     }
    
//     setNewCategory({ name: '', parentId: '' });
//   };

//   const updateCategory = () => {
//     if (!editingCategory || editingCategory.name.trim() === '') return;
    
//     setCategories(categories.map(cat => {
//       if (cat.id === editingCategory.id) {
//         return {
//           ...cat,
//           name: editingCategory.name,
//             };
//       }
      
//       // Check if any subcategory needs updating
//       if (cat.subcategories.some(sub => sub.id === editingCategory.id)) {
//         return {
//           ...cat,
//           subcategories: cat.subcategories.map(sub => {
//             if (sub.id === editingCategory.id) {
//               return {
//                 ...sub,
//                 name: editingCategory.name,
                
//               };
//             }
//             return sub;
//           })
//         };
//       }
      
//       return cat;
//     }));
    
//     setEditingCategory(null);
//   };

//   const deleteCategory = (id, isSubcategory = false, parentId = null) => {
//     if (isSubcategory && parentId) {
//       // Delete subcategory
//       setCategories(categories.map(cat => {
//         if (cat.id === parentId) {
//           return {
//             ...cat,
//             subcategories: cat.subcategories.filter(sub => sub.id !== id)
//           };
//         }
//         return cat;
//       }));
//     } else {
//       // Delete main category
//       setCategories(categories.filter(cat => cat.id !== id));
//     }
//   };

//   // Testimonial functions
//   const addTestimonial = () => {
//     if (newTestimonial.name.trim() === '' || newTestimonial.content.trim() === '') return;
//     const newTest = {
//       id: Date.now(),
//       name: newTestimonial.name,
//       content: newTestimonial.content,
//       rating: newTestimonial.rating,
//       status: 'pending'
//     };
//     setTestimonials([...testimonials, newTest]);
//     setNewTestimonial({ name: '', content: '', rating: 5 });
//   };

//   const approveTestimonial = (id) => {
//     setTestimonials(testimonials.map(test => 
//       test.id === id ? {...test, status: 'approved'} : test
//     ));
//   };

//   const deleteTestimonial = (id) => {
//     setTestimonials(testimonials.filter(test => test.id !== id));
//   };

//   // Blog functions
//   const addBlog = () => {
//     if (newBlog.title.trim() === '') return;
//     const newPost = {
//       id: Date.now(),
//       title: newBlog.title,
//       content: newBlog.content,
//       category: newBlog.category || categories[0]?.name || '',
//       subcategory: newBlog.subcategory || '',
//       date: new Date().toISOString().split('T')[0],
//       status: 'draft',
//       comments: 0,
//       videoUrl: newBlog.videoUrl
//     };
//     setBlogs([...blogs, newPost]);
//     setNewBlog({ title: '', content: '', category: '', subcategory: '', videoUrl: '' });
//   };

//   const updateBlog = () => {
//     if (!editingBlog || editingBlog.title.trim() === '') return;
    
//     setBlogs(blogs.map(blog => 
//       blog.id === editingBlog.id ? {...editingBlog} : blog
//     ));
    
//     setEditingBlog(null);
//   };

//   const publishBlog = (id) => {
//     setBlogs(blogs.map(blog => 
//       blog.id === id ? {...blog, status: 'published'} : blog
//     ));
//   };

//   const deleteBlog = (id) => {
//     setBlogs(blogs.filter(blog => blog.id !== id));
//   };

//   // Comment functions
//   const approveComment = (id) => {
//     setComments(comments.map(comment => 
//       comment.id === id ? {...comment, status: 'approved'} : comment
//     ));
//   };

//   const deleteComment = (id) => {
//     setComments(comments.filter(comment => comment.id !== id));
//   };

//   const replyToComment = (id) => {
//     if (replyContent.trim() === '') return;
    
//     // In a real app, you would save this reply to your database
//     alert(`Reply sent to comment #${id}: ${replyContent}`);
    
//     setReplyingTo(null);
//     setReplyContent('');
//   };

//   // Get subcategories for a selected category
//   const getSubcategories = (categoryName) => {
//     if (!categoryName) return [];
//     const category = categories.find(cat => cat.name === categoryName);
//     return category ? category.subcategories : [];
//   };

//   return (
//     <div className="bg-white rounded-xl md:rounded-2xl p-4 md:p-6 shadow-md md:shadow-lg border border-gray-100 mt-6">
//       <h2 className="text-xl md:text-2xl font-bold text-gray-900 mb-6">Content Management</h2>
      
//       {/* Tabs */}
//       <div className="flex flex-wrap border-b border-gray-200 mb-6">
//         {[
//           { id: 'categories', name: 'Categories', icon: faFolder },
//           { id: 'testimonials', name: 'Testimonials', icon: faComment },
//           { id: 'blogs', name: 'Blogs', icon: faBookOpen },
//           { id: 'comments', name: 'Comments', icon: faReply },
//            { id: 'other', name: 'Other', icon: faCog }
//         ].map(tab => (
//           <button
//             key={tab.id}
//             className={`px-4 py-2 font-medium flex items-center ${activeTab === tab.id ? 'text-black border-b-2 border-black' : 'text-gray-600 hover:text-gray-900'}`}
//             onClick={() => setActiveTab(tab.id)}
//           >
//             <FontAwesomeIcon icon={tab.icon} className="mr-2" />
//             {tab.name}
//           </button>
//         ))}
//       </div>
      
//       {/* Categories Tab */}
//       {activeTab === 'categories' && (
//         <div>
//           <div className="mb-6 p-4 bg-gray-50 rounded-lg">
//             <h3 className="font-medium text-gray-900 mb-3">
//               {editingCategory ? 'Edit Category' : 'Add New Category/Subcategory'}
//             </h3>
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mb-3">
//               <input
//                 type="text"
//                 placeholder="Category Name"
//                 className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-blacl"
//                 value={editingCategory ? editingCategory.name : newCategory.name}
//                 onChange={(e) => editingCategory 
//                   ? setEditingCategory({...editingCategory, name: e.target.value})
//                   : setNewCategory({...newCategory, name: e.target.value})
//                 }
//               />
//             </div>
            
//             {!editingCategory && (
//               <div className="mb-3">
//                 <label className="block text-sm font-medium text-gray-700 mb-1">Parent Category (for subcategories)</label>
//                 <select
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                   value={newCategory.parentId}
//                   onChange={(e) => setNewCategory({...newCategory, parentId: e.target.value})}
//                 >
//                   <option value="">Select Parent Category (optional)</option>
//                   {categories.map(category => (
//                     <option key={category.id} value={category.id}>{category.name}</option>
//                   ))}
//                 </select>
//               </div>
//             )}
            
//             <div className="flex gap-2">
//               {editingCategory ? (
//                 <>
//                   <button
//                     className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black flex items-center"
//                     onClick={updateCategory}
//                   >
//                     <FontAwesomeIcon icon={faCheck} className="mr-2" />
//                     Update Category
//                   </button>
//                   <button
//                     className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 flex items-center"
//                     onClick={() => setEditingCategory(null)}
//                   >
//                     <FontAwesomeIcon icon={faTimes} className="mr-2" />
//                     Cancel
//                   </button>
//                 </>
//               ) : (
//                 <button
//                   className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black flex items-center"
//                   onClick={addCategory}
//                 >
//                   <FontAwesomeIcon icon={faPlus} className="mr-2" />
//                   Add {newCategory.parentId ? 'Subcategory' : 'Category'}
//                 </button>
//               )}
//             </div>
//           </div>
          
//           <div className="overflow-x-auto">
//             <table className="min-w-full divide-y divide-gray-200">
//      <thead className="bg-gray-50">
//   <tr>
//     <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//       Name
//     </th>
//     <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//       Type
//     </th>
//     <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//       Actions
//     </th>
//   </tr>
// </thead>
// <tbody>
//   {categories.map(category => (
//     <React.Fragment key={category.id}>
//       {/* Main Category Row */}
//       <tr className="bg-gray-50">
//         <td className="px-4 py-4 text-sm font-medium text-gray-900">
//           <FontAwesomeIcon icon={faFolder} className="mr-2 text-black" />
//           {category.name}
//         </td>
//         <td className="px-4 py-4 text-sm text-gray-500">Main Category</td>
//         <td className="px-4 py-4 text-sm font-medium">
//           <button
//             className="text-black hover:text-blue-900 mr-3"
//             onClick={() => setEditingCategory({ ...category })}
//           >
//             <FontAwesomeIcon icon={faEdit} />
//           </button>
//           <button
//             className="text-red-600 hover:text-red-900"
//             onClick={() => deleteCategory(category.id)}
//           >
//             <FontAwesomeIcon icon={faTrash} />
//           </button>
//         </td>
//       </tr>

//       {/* Subcategories */}
//       {category.subcategories?.map(subcategory => (
//         <tr key={subcategory.id}>
//           <td className="px-4 py-4 text-sm font-medium text-gray-900 pl-8">
//             <FontAwesomeIcon icon={faFolderTree} className="mr-2 text-green-500" />
//             {subcategory.name}
//           </td>
//           <td className="px-4 py-4 text-sm text-gray-500">Subcategory</td>
//           <td className="px-4 py-4 text-sm font-medium">
//             <button
//               className="text-black hover:text-blue-900 mr-3"
//               onClick={() => setEditingCategory({ ...subcategory })}
//             >
//               <FontAwesomeIcon icon={faEdit} />
//             </button>
//             <button
//               className="text-red-600 hover:text-red-900"
//               onClick={() => deleteCategory(subcategory.id, true, category.id)}
//             >
//               <FontAwesomeIcon icon={faTrash} />
//             </button>
//           </td>
//         </tr>
//       ))}
//     </React.Fragment>
//   ))}
// </tbody>


//             </table>
//           </div>
//         </div>
//       )}
      
//       {/* Testimonials Tab */}
//       {activeTab === 'testimonials' && (
//         <div>
//           <div className="mb-6 p-4 bg-gray-50 rounded-lg">
//             <h3 className="font-medium text-gray-900 mb-3">Add New Testimonial</h3>
//             <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
//               <input
//                 type="text"
//                 placeholder="Customer Name"
//                 className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                 value={newTestimonial.name}
//                 onChange={(e) => setNewTestimonial({...newTestimonial, name: e.target.value})}
//               />
//               <div>
//                 <label className="block text-sm font-medium text-gray-700 mb-1">Rating</label>
//                 <select
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                   value={newTestimonial.rating}
//                   onChange={(e) => setNewTestimonial({...newTestimonial, rating: parseInt(e.target.value)})}
//                 >
//                   {[1, 2, 3, 4, 5].map(num => (
//                     <option key={num} value={num}>{num} Star{num !== 1 ? 's' : ''}</option>
//                   ))}
//                 </select>
//               </div>
//             </div>
//             <textarea
//               placeholder="Testimonial Content"
//               rows="3"
//               className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black mb-3"
//               value={newTestimonial.content}
//               onChange={(e) => setNewTestimonial({...newTestimonial, content: e.target.value})}
//             />
//             <button
//               className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black flex items-center"
//               onClick={addTestimonial}
//             >
//               <FontAwesomeIcon icon={faPlus} className="mr-2" />
//               Add Testimonial
//             </button>
//           </div>
          
//           <div className="overflow-x-auto">
//             <table className="min-w-full divide-y divide-gray-200">
//               <thead className="bg-gray-50">
//                 <tr>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Content</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rating</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
//                 </tr>
//               </thead>
//               <tbody className="bg-white divide-y divide-gray-200">
//                 {testimonials.map(testimonial => (
//                   <tr key={testimonial.id}>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{testimonial.name}</td>
//                     <td className="px-4 py-4 text-sm text-gray-500">{testimonial.content}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{'★'.repeat(testimonial.rating)}{'☆'.repeat(5-testimonial.rating)}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm">
//                       <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
//                         testimonial.status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
//                       }`}>
//                         {testimonial.status}
//                       </span>
//                     </td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
//                       {testimonial.status !== 'approved' && (
//                         <button 
//                           className="text-green-600 hover:text-green-900 mr-3"
//                           onClick={() => approveTestimonial(testimonial.id)}
//                         >
//                           <FontAwesomeIcon icon={faCheck} />
//                         </button>
//                       )}
//                       <button 
//                         className="text-red-600 hover:text-red-900"
//                         onClick={() => deleteTestimonial(testimonial.id)}
//                       >
//                         <FontAwesomeIcon icon={faTrash} />
//                       </button>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       )}
      
//       {/* Blogs Tab */}
//       {activeTab === 'blogs' && (
//         <div>
//           <div className="mb-6 p-4 bg-gray-50 rounded-lg">
//             <h3 className="font-medium text-gray-900 mb-3">
//               {editingBlog ? 'Edit Blog Post' : 'Add New Blog Post'}
//             </h3>
//             <div className="grid grid-cols-1 gap-3 mb-3">
//               <input
//                 type="text"
//                 placeholder="Blog Title"
//                 className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                 value={editingBlog ? editingBlog.title : newBlog.title}
//                 onChange={(e) => editingBlog 
//                   ? setEditingBlog({...editingBlog, title: e.target.value})
//                   : setNewBlog({...newBlog, title: e.target.value})
//                 }
//               />
              
//               <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
//                 <select
//                   className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                   value={editingBlog ? editingBlog.category : newBlog.category}
//                   onChange={(e) => editingBlog 
//                     ? setEditingBlog({...editingBlog, category: e.target.value, subcategory: ''})
//                     : setNewBlog({...newBlog, category: e.target.value, subcategory: ''})
//                   }
//                 >
//                   <option value="">Select Category</option>
//                   {categories.map(category => (
//                     <option key={category.id} value={category.name}>{category.name}</option>
//                   ))}
//                 </select>
                
//                 <select
//                   className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                   value={editingBlog ? editingBlog.subcategory : newBlog.subcategory}
//                   onChange={(e) => editingBlog 
//                     ? setEditingBlog({...editingBlog, subcategory: e.target.value})
//                     : setNewBlog({...newBlog, subcategory: e.target.value})
//                   }
//                   disabled={editingBlog ? !editingBlog.category : !newBlog.category}
//                 >
//                   <option value="">Select Subcategory (optional)</option>
//                   {(editingBlog ? getSubcategories(editingBlog.category) : getSubcategories(newBlog.category))
//                     .map(subcategory => (
//                       <option key={subcategory.id} value={subcategory.name}>{subcategory.name}</option>
//                     ))
//                   }
//                 </select>
//               </div>
              
//               <div>
//                 <label className="block text-sm font-medium text-gray-700 mb-1 flex items-center">
//                   <FontAwesomeIcon icon={faVideo} className="mr-2" />
//                   Video URL (YouTube, Vimeo, etc.)
//                 </label>
//                 <input
//                   type="text"
//                   placeholder="https://www.youtube.com/embed/..."
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                   value={editingBlog ? editingBlog.videoUrl : newBlog.videoUrl}
//                   onChange={(e) => editingBlog 
//                     ? setEditingBlog({...editingBlog, videoUrl: e.target.value})
//                     : setNewBlog({...newBlog, videoUrl: e.target.value})
//                   }
//                 />
//               </div>
              
//               <textarea
//                 placeholder="Blog Content"
//                 rows="5"
//                 className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                 value={editingBlog ? editingBlog.content : newBlog.content}
//                 onChange={(e) => editingBlog 
//                   ? setEditingBlog({...editingBlog, content: e.target.value})
//                   : setNewBlog({...newBlog, content: e.target.value})
//                 }
//               />
//             </div>
            
//             <div className="flex gap-2">
//               {editingBlog ? (
//                 <>
//                   <button
//                     className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black flex items-center"
//                     onClick={updateBlog}
//                   >
//                     <FontAwesomeIcon icon={faCheck} className="mr-2" />
//                     Update Blog
//                   </button>
//                   <button
//                     className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 flex items-center"
//                     onClick={() => setEditingBlog(null)}
//                   >
//                     <FontAwesomeIcon icon={faTimes} className="mr-2" />
//                     Cancel
//                   </button>
//                 </>
//               ) : (
//                 <>
//                   <button
//                     className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black flex items-center"
//                     onClick={addBlog}
//                   >
//                     <FontAwesomeIcon icon={faPlus} className="mr-2" />
//                     Save as Draft
//                   </button>
//                   <button
//                     className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center"
//                     onClick={addBlog}
//                   >
//                     <FontAwesomeIcon icon={faCheck} className="mr-2" />
//                     Publish
//                   </button>
//                 </>
//               )}
//             </div>
//           </div>
          
//           <div className="overflow-x-auto">
//             <table className="min-w-full divide-y divide-gray-200">
//               <thead className="bg-gray-50">
//                 <tr>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subcategory</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comments</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
//                 </tr>
//               </thead>
//               <tbody className="bg-white divide-y divide-gray-200">
//                 {blogs.map(blog => (
//                   <tr key={blog.id}>
//                     <td className="px-4 py-4 text-sm font-medium text-gray-900">{blog.title}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{blog.category}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{blog.subcategory || '-'}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{blog.date}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm">
//                       <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
//                         blog.status === 'published' ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
//                       }`}>
//                         {blog.status}
//                       </span>
//                     </td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{blog.comments}</td>
//                     <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
//                       {blog.status !== 'published' && (
//                         <button 
//                           className="text-green-600 hover:text-green-900 mr-3"
//                           onClick={() => publishBlog(blog.id)}
//                         >
//                           <FontAwesomeIcon icon={faCheck} />
//                         </button>
//                       )}
//                       <button 
//                         className="text-black hover:text-blue-900 mr-3"
//                         onClick={() => setEditingBlog({...blog})}
//                       >
//                         <FontAwesomeIcon icon={faEdit} />
//                       </button>
//                       <button 
//                         className="text-red-600 hover:text-red-900"
//                         onClick={() => deleteBlog(blog.id)}
//                       >
//                         <FontAwesomeIcon icon={faTrash} />
//                       </button>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       )}
      
//       {/* Comments Tab */}
//       {activeTab === 'comments' && (
//         <div>
//           <div className="overflow-x-auto">
//             <table className="min-w-full divide-y divide-gray-200">
//               <thead className="bg-gray-50">
//                 <tr>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Post</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Author</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Comment</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
//                   <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
//                 </tr>
//               </thead>
//               <tbody className="bg-white divide-y divide-gray-200">
//                 {comments.map(comment => (
//                   <React.Fragment key={comment.id}>
//                     <tr>
//                       <td className="px-4 py-4 text-sm font-medium text-gray-900">{comment.post}</td>
//                       <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{comment.author}</td>
//                       <td className="px-4 py-4 text-sm text-gray-500">{comment.content}</td>
//                       <td className="px-4 py-4 whitespace-nowrap text-sm text-gray-500">{comment.date}</td>
//                       <td className="px-4 py-4 whitespace-nowrap text-sm">
//                         <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
//                           comment.status === 'approved' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
//                         }`}>
//                           {comment.status}
//                         </span>
//                       </td>
//                       <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
//                         {comment.status !== 'approved' && (
//                           <button 
//                             className="text-green-600 hover:text-green-900 mr-3"
//                             onClick={() => approveComment(comment.id)}
//                           >
//                             <FontAwesomeIcon icon={faCheck} />
//                           </button>
//                         )}
//                         <button 
//                           className="text-black hover:text-blue-900 mr-3"
//                           onClick={() => setReplyingTo(replyingTo === comment.id ? null : comment.id)}
//                         >
//                           <FontAwesomeIcon icon={faReply} />
//                         </button>
//                         <button 
//                           className="text-red-600 hover:text-red-900"
//                           onClick={() => deleteComment(comment.id)}
//                         >
//                           <FontAwesomeIcon icon={faTrash} />
//                         </button>
//                       </td>
//                     </tr>
//                     {replyingTo === comment.id && (
//                       <tr>
//                         <td colSpan="6" className="px-4 py-4 bg-gray-50">
//                           <div className="flex flex-col md:flex-row gap-2">
//                             <textarea
//                               placeholder="Type your reply here..."
//                               rows="2"
//                               className="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black focus:border-black"
//                               value={replyContent}
//                               onChange={(e) => setReplyContent(e.target.value)}
//                             />
//                             <div className="flex gap-2">
//                               <button
//                                 className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black h-full"
//                                 onClick={() => replyToComment(comment.id)}
//                               >
//                                 Send Reply
//                               </button>
//                               <button
//                                 className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 h-full"
//                                 onClick={() => setReplyingTo(null)}
//                               >
//                                 Cancel
//                               </button>
//                             </div>
//                           </div>
//                         </td>
//                       </tr>
//                     )}
//                   </React.Fragment>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       )}

      
//  {activeTab === "other" && (
//         <div className="p-4 bg-gray-50 rounded-lg space-y-6">
//           {/* Delivery Settings */}
//           <div>
//             <h3 className="font-medium text-gray-900 mb-3">
//               Delivery Settings
//             </h3>

//             {/* Toggle */}
//             <div className="flex items-center gap-4 mb-4">
//               <label className="flex items-center gap-2 cursor-pointer">
//                 <input
//                   type="radio"
//                   name="deliveryMode"
//                   value="fixed"
//                   checked={deliverySettings.mode === "fixed"}
//                   onChange={() =>
//                     setDeliverySettings({
//                       ...deliverySettings,
//                       mode: "fixed",
//                     })
//                   }
//                 />
//                 Fixed Charges
//               </label>
//               <label className="flex items-center gap-2 cursor-pointer">
//                 <input
//                   type="radio"
//                   name="deliveryMode"
//                   value="api"
//                   checked={deliverySettings.mode === "api"}
//                   onChange={() =>
//                     setDeliverySettings({
//                       ...deliverySettings,
//                       mode: "api",
//                     })
//                   }
//                 />
//                 From API
//               </label>
//             </div>

//             {/* Mode-specific input */}
//             {deliverySettings.mode === "fixed" ? (
//               <div className="mb-4">
//                 <label className="block text-sm font-medium text-gray-700 mb-1">
//                   Fixed Delivery Charges
//                 </label>
//                 <input
//                   type="number"
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black"
//                   value={deliverySettings.fixedCharge}
//                   onChange={(e) =>
//                     setDeliverySettings({
//                       ...deliverySettings,
//                       fixedCharge: parseInt(e.target.value) || 0,
//                     })
//                   }
//                 />
//               </div>
//             ) : (
//               <div className="mb-4">
//                 <label className="block text-sm font-medium text-gray-700 mb-1">
//                   API URL to fetch delivery charge
//                 </label>
//                 <input
//                   type="text"
//                   placeholder="https://api.example.com/delivery-charge"
//                   className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black"
//                   value={deliverySettings.apiUrl}
//                   onChange={(e) =>
//                     setDeliverySettings({
//                       ...deliverySettings,
//                       apiUrl: e.target.value,
//                     })
//                   }
//                 />
//               </div>
//             )}

//             {/* Free delivery above */}
//             <div className="mb-4">
//               <label className="block text-sm font-medium text-gray-700 mb-1">
//                 Free Delivery Above
//               </label>
//               <input
//                 type="number"
//                 className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-black"
//                 value={deliverySettings.freeDeliveryAbove}
//                 onChange={(e) =>
//                   setDeliverySettings({
//                     ...deliverySettings,
//                     freeDeliveryAbove: parseInt(e.target.value) || 0,
//                   })
//                 }
//               />
//             </div>
//           </div>

//           {/* Banner Management */}
       
// <div className="max-w-6xl mx-auto p-4">
//   {/* Header */}
//   <div className="flex items-center justify-between mb-6">
//     <h3 className="text-xl font-semibold text-gray-800">Homepage Banners</h3>
//     <button
//       type="button"
//       onClick={() =>
//         setBanners([
//           ...banners,
//           { heading: "", subtext: "", buttonText: "", redirectUrl: "", imageFile: null, imagePreview: "" },
//         ])
//       }
//       className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
//     >
//       <i className="fas fa-plus"></i>
//       Add New Banner
//     </button>
//   </div>

//   {/* Banners List */}
//   <div className="space-y-5">
//     {banners.map((banner, index) => (
//       <div
//         key={index}
//         className="border border-gray-200 p-5 rounded-xl bg-white shadow-sm hover:shadow-md transition-shadow"
//       >
//         {/* Banner Header with Index and Remove Button */}
//         <div className="flex items-center justify-between mb-4">
//           <span className="text-sm font-medium text-gray-500">Banner #{index + 1}</span>
//           <button
//             onClick={() => {
//               const updated = banners.filter((_, i) => i !== index);
//               setBanners(updated);
//             }}
//             className="flex items-center gap-1 text-sm text-red-500 hover:text-red-700"
//           >
//             <i className="fas fa-trash-alt text-xs"></i>
//             Remove
//           </button>
//         </div>

//         <div className="space-y-4">
//           {/* Image Upload Section */}
//           <div>
//             <label className="block text-sm font-medium text-gray-700 mb-2">
//               Banner Image
//             </label>
//             <div className="flex flex-col sm:flex-row items-start gap-4">
//               <div className="relative flex-1">
//                 <label className="flex flex-col items-center justify-center w-full h-32 border-2 border-dashed border-gray-300 rounded-lg cursor-pointer hover:border-indigo-400 transition-colors">
//                   <div className="flex flex-col items-center justify-center pt-5 pb-6">
//                     <i className="fas fa-cloud-upload-alt text-3xl text-gray-400 mb-2"></i>
//                     <p className="text-sm text-gray-500">Click to upload an image</p>
//                   </div>
//                   <input
//                     type="file"
//                     accept="image/*"
//                     className="hidden"
//                     onChange={(e) => {
//                       const file = e.target.files[0];
//                       if (file) {
//                         const imageUrl = URL.createObjectURL(file);
//                         const updated = [...banners];
//                         updated[index].imageFile = file;
//                         updated[index].imagePreview = imageUrl;
//                         setBanners(updated);
//                       }
//                     }}
//                   />
//                 </label>
//               </div>

//               {banner.imagePreview && (
//                 <div className="relative group flex-shrink-0">
//                   <img
//                     src={banner.imagePreview}
//                     alt="Banner Preview"
//                     className="h-32 w-48 object-cover rounded-lg border-2 border-gray-200 cursor-pointer"
//                     onClick={() => setSelectedImage(banner.imagePreview)}
//                   />
//                   <button
//                     onClick={() => {
//                       const updated = [...banners];
//                       updated[index].imageFile = null;
//                       updated[index].imagePreview = "";
//                       setBanners(updated);
//                     }}
//                     className="absolute -top-2 -right-2 bg-red-500 text-white p-1 rounded-full text-xs hover:bg-red-600 transition-colors"
//                   >
//                     <i className="fas fa-times w-3 h-3"></i>
//                   </button>
//                 </div>
//               )}
//             </div>
//           </div>

//           {/* Text Inputs Grid */}
//           <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-1">Heading</label>
//               <div className="relative">
//                 <i className="fas fa-heading absolute left-3 top-3 text-gray-400"></i>
//                 <input
//                   type="text"
//                   placeholder="Banner heading"
//                   className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400"
//                   value={banner.heading}
//                   onChange={(e) => {
//                     const updated = [...banners];
//                     updated[index].heading = e.target.value;
//                     setBanners(updated);
//                   }}
//                 />
//               </div>
//             </div>

//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-1">Subtext</label>
//               <div className="relative">
//                 <i className="fas fa-text-height absolute left-3 top-3 text-gray-400"></i>
//                 <input
//                   type="text"
//                   placeholder="Banner subtext"
//                   className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400"
//                   value={banner.subtext}
//                   onChange={(e) => {
//                     const updated = [...banners];
//                     updated[index].subtext = e.target.value;
//                     setBanners(updated);
//                   }}
//                 />
//               </div>
//             </div>

//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-1">Button Text</label>
//               <div className="relative">
//                 <i className="fas fa-mouse-pointer absolute left-3 top-3 text-gray-400"></i>
//                 <input
//                   type="text"
//                   placeholder="Button text"
//                   className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400"
//                   value={banner.buttonText}
//                   onChange={(e) => {
//                     const updated = [...banners];
//                     updated[index].buttonText = e.target.value;
//                     setBanners(updated);
//                   }}
//                 />
//               </div>
//             </div>

//             <div>
//               <label className="block text-sm font-medium text-gray-700 mb-1">Redirect URL</label>
//               <div className="relative">
//                 <i className="fas fa-link absolute left-3 top-3 text-gray-400"></i>
//                 <input
//                   type="text"
//                   placeholder="/product/123 or /blog/abc"
//                   className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-200 focus:border-indigo-400"
//                   value={banner.redirectUrl}
//                   onChange={(e) => {
//                     const updated = [...banners];
//                     updated[index].redirectUrl = e.target.value;
//                     setBanners(updated);
//                   }}
//                 />
//               </div>
//             </div>
//           </div>
//         </div>
//       </div>
//     ))}
//   </div>

//   {/* Image Preview Modal */}
//   {selectedImage && (
//     <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
//       <div className="relative bg-white rounded-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
//         <img
//           src={selectedImage}
//           alt="Full Preview"
//           className="w-full h-auto max-h-[80vh] object-contain"
//         />
//         <button
//           onClick={() => setSelectedImage(null)}
//           className="absolute top-4 right-4 bg-red-500 text-white p-2 rounded-full hover:bg-red-600 transition-colors"
//         >
//           <i className="fas fa-times w-5 h-5"></i>
//         </button>
//       </div>
//     </div>
//   )}
// </div>
//           {/* Save */}
//           <button className="px-4 py-2 bg-black text-white rounded-lg hover:bg-black">
//             Save
//           </button>
//         </div>
//       )}

//     </div>
//   );
// };

// export default ContentManagement;